type User {
  id: ID!
  email: String!
  fName: String!
  lName: String!
  isActive: Boolean!
  profile: String
  bio: String
  coverPicture: String
}
# Session model
type Session {
  associate: User!
  userEmail: String!
  timeStamps: String!
  token: String!
}

type Query {
  "a list of all the users"
  loggedInUser: LoggedInUserResponse
  "a list of all the users"
  allUsers(params: allUser): AllUsersResponse
}

type Mutation {
  "Create a new user"
  signUp(input: SignUpUserParams): SignUpResponse
  "login to your account"
  signIn(input: SignInParams): SignInResponse
  "logout from your account"
  logout(email: String!): Response
  "Rest your password"
  resetPassword(newPassword: String!): Response
  newJwt: Response
  updateUser: Response
  uploadProfile: Response
}
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
input SignUpUserParams {
  fName: String!
  lName: String!
  email: String!
  password: String!
}
input SignInParams {
  email: String!
  password: String!
}

input allUser {
  order: Order!
  take: Int!
  page: Int!
  search: String!
}

# user Response
# user Response
# user Response
# user Response
# user Response
# user Response
type SignInResponse {
  status: Boolean!
  message: String!
  data: Token
}
type SignUpResponse {
  status: Boolean!
  message: String!
  data: User
}
type LoggedInUserResponse {
  status: Boolean!
  message: String!
  data: User
}

type AllUsersResponse {
  status: Boolean!
  message: String!
  data: [Friend!]
  totalUsers: Int
}
type Token {
  accessJWT: String!
}
enum Order {
  asc
  desc
}
