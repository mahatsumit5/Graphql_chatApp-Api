type User {
  id: ID!
  email: String!
  fName: String!
  lName: String!
  isActive: Boolean!
  profile: String
  bio: String
  coverPicture: String
}

type Friend {
  id: ID!
  fName: String!
  lName: String!
  email: String!
  profile: String
  isActive: Boolean!
}
# Session model
type Session {
  associate: User!
  userEmail: String!
  timeStamps: String!
  token: String!
}

type Query {
  "a list of all the users"
  loggedInUser: LoggedInUserResponse
  "a list of all the users"
  allUsers(params: allUser): AllUsersResponse
}

type Mutation {
  logout(email: String!): Response
  updateUser(
    password: String
    profile: String
    coverPicture: String
    bio: String
    fName: String
    lName: String
  ): UpdateUserResponse
}
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
# Input types
input SignUpUserParams {
  fName: String!
  lName: String!
  email: String!
  password: String!
}

input allUser {
  order: Order!
  take: Int!
  page: Int!
  search: String!
}

# user Response
# user Response
# user Response
# user Response
# user Response
# user Response

type LoggedInUserResponse {
  status: Boolean!
  message: String!
  data: User
}

type AllUsersResponse {
  status: Boolean!
  message: String!
  data: [Friend!]
  totalUsers: Int
}

enum Order {
  asc
  desc
}

type UpdateUserResponse {
  status: Boolean!
  message: String!
  data: User
}
