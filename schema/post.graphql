## type count
type _count {
  likes: Int!
  comments: Int!
}

# # Post model
type Post {
  id: ID!
  title: String!
  content: String!
  createdAt: String!
  updatedAt: String!
  images: [String!]!
  author: User
  _count: _count
  hasLiked: Boolean!
}

# PostLike model
type PostLike {
  id: ID!
  postId: String!
  userId: String!
  post: Post!
  user: User!
}

type Mutation {
  uploadPost(body: PostInput): UploadAPostResponse!
  deletePost(id: String!): GetPostByUserIdResponse!
  likePost(postId: String!): GetPostByUserIdResponse!
  unlikePost(postId: String!): GetPostByUserIdResponse!
}

type Query {
  getAllPosts(args: GetAllPostArgs): GetAllPostResponse
  getPostByUserId(userId: String!): GetPostByUserIdResponse
}

input PostInput {
  title: String!
  content: String!
  images: [String]
  id: String!
}

input GetAllPostArgs {
  page: Int!
  take: Int!
}

# Response types
# Response types
# Response types
# Response types
# Response types
# Response types
# Response types
# Response types
# Response types
# Response types
# Response types
# Response types

type GetAllPostResponse {
  status: Boolean!
  message: String!
  posts: [Post!]
  totalNumberOfPosts: Int
}

type UploadAPostResponse {
  status: Boolean!
  message: String!
  result: Post
}
type GetPostByUserIdResponse {
  status: Boolean!
  message: String!
  posts: Post
}
